{"ast":null,"code":"import axios from \"axios\";\nimport appConfig from \"../Utils/AppConfig\";\nimport { TaskActionType, tasksStore } from \"../Redux/taskState\";\nclass DataService {\n  async getAllTask() {\n    try {\n      let tasks = tasksStore.getState().tasks;\n      if (tasks.length === 0) {\n        const response = await axios.get(appConfig.playersUrl);\n        tasks = response.data;\n        tasksStore.dispatch({\n          type: TaskActionType.FetchTasks,\n          payload: tasks\n        });\n      }\n      return tasks;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async getAllTasksByKindTask() {\n    try {\n      let kindTask = tasksStore.getState().kindTask;\n      const response = await axios.get(appConfig.countriesUrl);\n      kindTask = response.data;\n      return kindTask;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async getTaskByKindTask(kindTaskId) {\n    let kindTask = tasksStore.getState().tasks;\n    let task = kindTask.find(t => t.kindTaskId === kindTaskId);\n    if (!task) {\n      const response = await axios.get(appConfig.taskByTaskUrl + kindTaskId);\n      kindTask = response.data;\n    }\n    return kindTask;\n  }\n  async addTask(task) {\n    try {\n      const headers = {\n        \"Content-Type\": \"multipart/form-data\"\n      };\n      const response = await axios.post(appConfig.playersUrl, task, {\n        headers\n      });\n      const addedTask = response.data;\n      tasksStore.dispatch({\n        type: TaskActionType.AddTask,\n        payload: addedTask\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async deleteTask(taskId) {\n    try {\n      await axios.delete(appConfig.playersUrl + taskId);\n      tasksStore.dispatch({\n        type: TaskActionType.DeleteTask,\n        payload: taskId\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async updateTask(task) {\n    try {\n      const headers = {\n        \"Content-Type\": \"multipart/form-data\"\n      };\n      const response = await axios.put(appConfig.playersUrl + task.playerId, task, {\n        headers\n      });\n      const updateTask = response.data;\n      console.log(updateTask);\n      tasksStore.dispatch({\n        type: TaskActionType.UpdateTask,\n        payload: updateTask\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async getTasksFinished() {\n    try {\n      let tasks = await this.getAllTask();\n      const taskFinished = tasks.filter(task => task.isFinish === 1);\n      await this.getAllTask();\n      return taskFinished;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n}\nconst dataService = new DataService();\nexport default dataService;","map":{"version":3,"names":["axios","appConfig","TaskActionType","tasksStore","DataService","getAllTask","tasks","getState","length","response","get","playersUrl","data","dispatch","type","FetchTasks","payload","err","console","log","getAllTasksByKindTask","kindTask","countriesUrl","getTaskByKindTask","kindTaskId","task","find","t","taskByTaskUrl","addTask","headers","post","addedTask","AddTask","deleteTask","taskId","delete","DeleteTask","updateTask","put","playerId","UpdateTask","getTasksFinished","taskFinished","filter","isFinish","dataService"],"sources":["C:/Users/User/Desktop/javascript/manchester project/Frontend/src/Services/DataService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport appConfig from \"../Utils/AppConfig\";\r\nimport { TaskActionType, tasksStore } from \"../Redux/taskState\";\r\nimport TeamModel from \"../Models/TeamModel\";\r\nimport CountryModel from \"../Models/CountryModel\";\r\n\r\nclass DataService {\r\n\r\n    async getAllTask(): Promise<TeamModel[]> {\r\n        try {\r\n            let tasks = tasksStore.getState().tasks;\r\n            if (tasks.length === 0) {\r\n                const response = await axios.get<TeamModel[]>(appConfig.playersUrl);\r\n                tasks = response.data;\r\n                tasksStore.dispatch({ type: TaskActionType.FetchTasks, payload: tasks })\r\n            }\r\n            return tasks;\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async getAllTasksByKindTask(): Promise<CountryModel[]> {\r\n        try {\r\n            let kindTask = tasksStore.getState().kindTask;\r\n            const response = await axios.get<CountryModel[]>(appConfig.countriesUrl);\r\n            kindTask = response.data;\r\n            return kindTask;\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async getTaskByKindTask(kindTaskId: number): Promise<TeamModel[]> {\r\n        let kindTask = tasksStore.getState().tasks\r\n        let task = kindTask.find(t => t.kindTaskId === kindTaskId)\r\n        if (!task) {\r\n            const response = await axios.get<TeamModel[]>(appConfig.taskByTaskUrl + kindTaskId);\r\n            kindTask = response.data;\r\n        }\r\n        return kindTask;\r\n    }\r\n\r\n\r\n    async addTask(task: TeamModel): Promise<void> {\r\n        try {\r\n            const headers = { \"Content-Type\": \"multipart/form-data\" };\r\n            const response = await axios.post<TeamModel>(appConfig.playersUrl, task, { headers })\r\n            const addedTask = response.data;\r\n            tasksStore.dispatch({ type: TaskActionType.AddTask, payload: addedTask })\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async deleteTask(taskId: number): Promise<void> {\r\n        try {\r\n            await axios.delete(appConfig.playersUrl + taskId);\r\n            tasksStore.dispatch({ type: TaskActionType.DeleteTask, payload: taskId })\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    async updateTask(task: TeamModel): Promise<void> {\r\n        try {\r\n            const headers = { \"Content-Type\": \"multipart/form-data\" };\r\n            const response = await axios.put<TeamModel>(appConfig.playersUrl + task.playerId, task, { headers });\r\n            const updateTask = response.data;\r\n            console.log(updateTask);\r\n            tasksStore.dispatch({ type: TaskActionType.UpdateTask, payload: updateTask });\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async getTasksFinished(): Promise<TeamModel[]> {\r\n        try {\r\n            let tasks = await this.getAllTask();\r\n            const taskFinished = tasks.filter((task) => task.isFinish === 1)\r\n            await this.getAllTask();\r\n            return taskFinished;\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n\r\n}\r\nconst dataService = new DataService();\r\nexport default dataService;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}