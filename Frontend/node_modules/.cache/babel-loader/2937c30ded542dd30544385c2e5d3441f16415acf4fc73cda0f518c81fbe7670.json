{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\javascript\\\\Project React Tasks2\\\\Frontend\\\\src\\\\Components\\\\DataArea\\\\DataList\\\\DataList.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport dataService from \"../../../Services/DataService\";\nimport DataCard from \"../DataCard/DataCard\";\nimport { tasksStore } from \"../../../Redux/taskState\";\nimport \"./DataList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DataList() {\n  _s();\n  const [tasks, setTask] = useState([]);\n  useEffect(() => {\n    dataService.getAllTasks2().then(task => setTask(task)).catch(err => console.log(err));\n    tasksStore.subscribe(() => {\n      const dup = [...tasksStore.getState().tasks.filter(task => !task.isArchived && !dataService.isMoreThanWeekFromNow(task))];\n      setTask(dup);\n    });\n  }, []);\n  async function toggleArchivedTasks() {\n    await dataService.getAllTask().then(task => setTask(task)).catch(err => console.log(err));\n  }\n\n  // async function deleteClickedTask(taskId: number) {\n  //     await dataService.deleteTask(taskId);\n  //     const duplicatedMovies = [...tasks];\n  //     const index = duplicatedMovies.findIndex(t => t.taskId === taskId);\n  //     duplicatedMovies.splice(index, 1);\n  //     setTask(duplicatedMovies);\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DataList box\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row row-cols-1 row-cols-md-6 g-4 wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleArchivedTasks,\n        children: \"Toggle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), tasks.map(item => /*#__PURE__*/_jsxDEV(DataCard, {\n        task: item\n      }, item.taskId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 38\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(DataList, \"Oalh7gGRly8nmy9ApEFAxF9qmMk=\");\n_c = DataList;\nexport default DataList;\nvar _c;\n$RefreshReg$(_c, \"DataList\");","map":{"version":3,"names":["useState","useEffect","dataService","DataCard","tasksStore","DataList","tasks","setTask","getAllTasks2","then","task","catch","err","console","log","subscribe","dup","getState","filter","isArchived","isMoreThanWeekFromNow","toggleArchivedTasks","getAllTask","map","item","taskId"],"sources":["C:/Users/User/Desktop/javascript/Project React Tasks2/Frontend/src/Components/DataArea/DataList/DataList.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport TaskModel from \"../../../Models/TaskModel\";\nimport dataService from \"../../../Services/DataService\";\nimport DataCard from \"../DataCard/DataCard\";\nimport { tasksStore } from \"../../../Redux/taskState\";\nimport \"./DataList.css\";\n\nfunction DataList(): JSX.Element {\n\n    const [tasks, setTask] = useState<TaskModel[]>([]);\n\n    useEffect(() => {\n        dataService.getAllTasks2()\n            .then(task => setTask(task))\n            .catch(err => console.log(err))\n        tasksStore.subscribe(() => {\n            const dup = [...tasksStore.getState().tasks.filter((task: TaskModel) => (!task.isArchived && !dataService.isMoreThanWeekFromNow(task)))];\n\n            setTask(dup);\n        })\n    }, [])\n\n    async function toggleArchivedTasks(): Promise<void> {\n        await dataService.getAllTask()\n            .then(task => setTask(task))\n            .catch(err => console.log(err))\n    }\n\n    // async function deleteClickedTask(taskId: number) {\n    //     await dataService.deleteTask(taskId);\n    //     const duplicatedMovies = [...tasks];\n    //     const index = duplicatedMovies.findIndex(t => t.taskId === taskId);\n    //     duplicatedMovies.splice(index, 1);\n    //     setTask(duplicatedMovies);\n    // }\n\n    return (\n        <div className=\"DataList box\">\n            <div className=\"row row-cols-1 row-cols-md-6 g-4 wrapper\">\n                <button onClick={toggleArchivedTasks}>Toggle</button>\n                <br />\n                {tasks.map((item) => <DataCard key={item.taskId} task={item} />)}\n            </div>\n        </div>\n    );\n}\nexport default DataList"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAOC,WAAW,MAAM,+BAA+B;AACvD,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,SAASC,UAAU,QAAQ,0BAA0B;AACrD,OAAO,gBAAgB;AAAC;AAExB,SAASC,QAAQ,GAAgB;EAAA;EAE7B,MAAM,CAACC,KAAK,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAc,EAAE,CAAC;EAElDC,SAAS,CAAC,MAAM;IACZC,WAAW,CAACM,YAAY,EAAE,CACrBC,IAAI,CAACC,IAAI,IAAIH,OAAO,CAACG,IAAI,CAAC,CAAC,CAC3BC,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;IACnCR,UAAU,CAACW,SAAS,CAAC,MAAM;MACvB,MAAMC,GAAG,GAAG,CAAC,GAAGZ,UAAU,CAACa,QAAQ,EAAE,CAACX,KAAK,CAACY,MAAM,CAAER,IAAe,IAAM,CAACA,IAAI,CAACS,UAAU,IAAI,CAACjB,WAAW,CAACkB,qBAAqB,CAACV,IAAI,CAAE,CAAC,CAAC;MAExIH,OAAO,CAACS,GAAG,CAAC;IAChB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,eAAeK,mBAAmB,GAAkB;IAChD,MAAMnB,WAAW,CAACoB,UAAU,EAAE,CACzBb,IAAI,CAACC,IAAI,IAAIH,OAAO,CAACG,IAAI,CAAC,CAAC,CAC3BC,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;EACvC;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACI;IAAK,SAAS,EAAC,cAAc;IAAA,uBACzB;MAAK,SAAS,EAAC,0CAA0C;MAAA,wBACrD;QAAQ,OAAO,EAAES,mBAAoB;QAAA,UAAC;MAAM;QAAA;QAAA;QAAA;MAAA,QAAS,eACrD;QAAA;QAAA;QAAA;MAAA,QAAM,EACLf,KAAK,CAACiB,GAAG,CAAEC,IAAI,iBAAK,QAAC,QAAQ;QAAmB,IAAI,EAAEA;MAAK,GAAxBA,IAAI,CAACC,MAAM;QAAA;QAAA;QAAA;MAAA,QAAgB,CAAC;IAAA;MAAA;MAAA;MAAA;IAAA;EAC9D;IAAA;IAAA;IAAA;EAAA,QACJ;AAEd;AAAC,GAtCQpB,QAAQ;AAAA,KAARA,QAAQ;AAuCjB,eAAeA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}