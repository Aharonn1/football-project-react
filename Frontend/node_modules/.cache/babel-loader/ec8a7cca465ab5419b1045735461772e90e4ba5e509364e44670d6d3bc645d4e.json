{"ast":null,"code":"import { createStore } from \"redux\";\nexport class TaskState {\n  constructor() {\n    this.tasks = [];\n    this.table = [];\n    this.kindTask = [];\n  }\n}\nexport let TaskActionType;\n(function (TaskActionType) {\n  TaskActionType[\"FetchKindCountries\"] = \"FetchKindCountries\";\n  TaskActionType[\"FetchPlayers\"] = \"FetchPlayers\";\n  TaskActionType[\"AddPlayer\"] = \"AddPlayer\";\n  TaskActionType[\"DeletePlayer\"] = \"DeletePlayer\";\n  TaskActionType[\"UpdatePlayer\"] = \"UpdatePlayer\";\n})(TaskActionType || (TaskActionType = {}));\nexport function taskReducer() {\n  let currentState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new TaskState();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = {\n    ...currentState\n  };\n  switch (action.type) {\n    case TaskActionType.FetchPlayers:\n      newState.tasks = action.payload;\n      break;\n    case TaskActionType.FetchKindTasks:\n      newState.kindTask = action.payload;\n      break;\n    case TaskActionType.AddTask:\n      if (newState.tasks.length > 0) {\n        newState.tasks.push(action.payload);\n      }\n      break;\n    case TaskActionType.DeleteTask:\n      const indexToDelete = newState.tasks.findIndex(t => t.playerId === action.payload);\n      if (indexToDelete >= 0) {\n        newState.tasks.splice(indexToDelete, 1);\n      }\n      break;\n    case TaskActionType.UpdateTask:\n      const indexToUpdate = newState.tasks.findIndex(t => t.playerId === action.payload.taskId);\n      if (indexToUpdate >= 0) {\n        newState.tasks[indexToUpdate] = action.payload;\n      }\n      break;\n  }\n  return newState;\n}\nexport const tasksStore = createStore(taskReducer);","map":{"version":3,"names":["createStore","TaskState","tasks","table","kindTask","TaskActionType","taskReducer","currentState","action","newState","type","FetchPlayers","payload","FetchKindTasks","AddTask","length","push","DeleteTask","indexToDelete","findIndex","t","playerId","splice","UpdateTask","indexToUpdate","taskId","tasksStore"],"sources":["C:/Users/User/Desktop/javascript/manchester project/Frontend/src/Redux/taskState.ts"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport TeamModel from \"../Models/TeamModel\";\r\nimport CountryModel from \"../Models/CountryModel\";\r\nimport TableModel from \"../Models/TableModel\";\r\n\r\n\r\nexport class TaskState {\r\n    tasks: TeamModel[] = [];\r\n    table: TableModel[] = [];\r\n    kindTask: CountryModel[] = [];\r\n}\r\n\r\nexport enum TaskActionType {\r\n    FetchKindCountries = \"FetchKindCountries\",\r\n    FetchPlayers = \"FetchPlayers\",\r\n    AddPlayer = \"AddPlayer\",\r\n    DeletePlayer = \"DeletePlayer\",\r\n    UpdatePlayer = \"UpdatePlayer\",\r\n}\r\n\r\nexport interface TasksAction {\r\n    type: TaskActionType;\r\n    payload: any\r\n}\r\n\r\nexport function taskReducer(currentState = new TaskState(), action: TasksAction): TaskState {\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n        case TaskActionType.FetchPlayers:\r\n            newState.tasks = action.payload;\r\n            break;\r\n\r\n        case TaskActionType.FetchKindTasks:\r\n            newState.kindTask = action.payload;\r\n            break;\r\n\r\n        case TaskActionType.AddTask:\r\n            if (newState.tasks.length > 0) {\r\n                newState.tasks.push(action.payload)\r\n            }\r\n            break;\r\n\r\n        case TaskActionType.DeleteTask:\r\n            const indexToDelete = newState.tasks.findIndex(t => t.playerId === action.payload)\r\n            if (indexToDelete >= 0) {\r\n                newState.tasks.splice(indexToDelete, 1)\r\n            }\r\n            break;\r\n\r\n        case TaskActionType.UpdateTask:\r\n            const indexToUpdate = newState.tasks.findIndex(t => t.playerId === action.payload.taskId)\r\n            if (indexToUpdate >= 0) {\r\n                newState.tasks[indexToUpdate] = action.payload;\r\n            }\r\n            break;\r\n    }\r\n    return newState;\r\n}\r\nexport const tasksStore = createStore(taskReducer)"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AAMnC,OAAO,MAAMC,SAAS,CAAC;EAAA;IAAA,KACnBC,KAAK,GAAgB,EAAE;IAAA,KACvBC,KAAK,GAAiB,EAAE;IAAA,KACxBC,QAAQ,GAAmB,EAAE;EAAA;AACjC;AAEA,WAAYC,cAAc;AAMzB,WANWA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;AAAA,GAAdA,cAAc,KAAdA,cAAc;AAa1B,OAAO,SAASC,WAAW,GAAiE;EAAA,IAAhEC,YAAY,uEAAG,IAAIN,SAAS,EAAE;EAAA,IAAEO,MAAmB;EAC3E,MAAMC,QAAQ,GAAG;IAAE,GAAGF;EAAa,CAAC;EAEpC,QAAQC,MAAM,CAACE,IAAI;IACf,KAAKL,cAAc,CAACM,YAAY;MAC5BF,QAAQ,CAACP,KAAK,GAAGM,MAAM,CAACI,OAAO;MAC/B;IAEJ,KAAKP,cAAc,CAACQ,cAAc;MAC9BJ,QAAQ,CAACL,QAAQ,GAAGI,MAAM,CAACI,OAAO;MAClC;IAEJ,KAAKP,cAAc,CAACS,OAAO;MACvB,IAAIL,QAAQ,CAACP,KAAK,CAACa,MAAM,GAAG,CAAC,EAAE;QAC3BN,QAAQ,CAACP,KAAK,CAACc,IAAI,CAACR,MAAM,CAACI,OAAO,CAAC;MACvC;MACA;IAEJ,KAAKP,cAAc,CAACY,UAAU;MAC1B,MAAMC,aAAa,GAAGT,QAAQ,CAACP,KAAK,CAACiB,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAKb,MAAM,CAACI,OAAO,CAAC;MAClF,IAAIM,aAAa,IAAI,CAAC,EAAE;QACpBT,QAAQ,CAACP,KAAK,CAACoB,MAAM,CAACJ,aAAa,EAAE,CAAC,CAAC;MAC3C;MACA;IAEJ,KAAKb,cAAc,CAACkB,UAAU;MAC1B,MAAMC,aAAa,GAAGf,QAAQ,CAACP,KAAK,CAACiB,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAKb,MAAM,CAACI,OAAO,CAACa,MAAM,CAAC;MACzF,IAAID,aAAa,IAAI,CAAC,EAAE;QACpBf,QAAQ,CAACP,KAAK,CAACsB,aAAa,CAAC,GAAGhB,MAAM,CAACI,OAAO;MAClD;MACA;EAAM;EAEd,OAAOH,QAAQ;AACnB;AACA,OAAO,MAAMiB,UAAU,GAAG1B,WAAW,CAACM,WAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}