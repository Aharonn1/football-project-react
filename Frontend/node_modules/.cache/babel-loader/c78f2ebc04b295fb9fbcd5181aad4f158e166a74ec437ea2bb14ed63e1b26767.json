{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\javascript\\\\Project React Tasks2\\\\Frontend\\\\src\\\\Components\\\\DataArea\\\\ArchivedCard\\\\ArchivedCard.tsx\";\nimport dataService from \"../../../Services/DataService\";\nimport \"./ArchivedCard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ArchivedCard(props) {\n  async function updateMe(task) {\n    props.task.isFinish = props.task.isFinish ? 0 : 1;\n    await dataService.updateTask(props.task);\n  }\n  async function updateArchived(task) {\n    props.task.isArchived = props.task.isArchived ? 0 : 1;\n    await dataService.updateTaskArchived(props.task);\n  }\n  async function deleteMe() {\n    if (!window.confirm(\"Are you sure?\")) return;\n    await props.deleteMe(props.task.taskId);\n    \"Task has been deleted\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ArchivedCard Box\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"  task: \", props.task.name, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"  kind task: \", props.task.kindTaskId, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"  description: \", props.task.description, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"  start date: \", props.task.startDate, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\" end date: \", props.task.endDate, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: props.task.isFinish === 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), \" The task is finished :\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => updateMe(props.task),\n      children: \"Finish\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => updateArchived(props.task),\n      children: \"Archived\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: deleteMe,\n      children: \"\\u274C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n_c = ArchivedCard;\nexport default ArchivedCard;\nvar _c;\n$RefreshReg$(_c, \"ArchivedCard\");","map":{"version":3,"names":["dataService","ArchivedCard","props","updateMe","task","isFinish","updateTask","updateArchived","isArchived","updateTaskArchived","deleteMe","window","confirm","taskId","name","kindTaskId","description","startDate","endDate"],"sources":["C:/Users/User/Desktop/javascript/Project React Tasks2/Frontend/src/Components/DataArea/ArchivedCard/ArchivedCard.tsx"],"sourcesContent":["import TaskModel from \"../../../Models/TaskModel\";\nimport dataService from \"../../../Services/DataService\";\nimport \"./ArchivedCard.css\";\n\ninterface TaskCardProps {\n    task: TaskModel,\n    deleteMe: (taskId: number) => Promise<void>\n}\n\nfunction ArchivedCard(props: TaskCardProps): JSX.Element {\n\n    async function updateMe(task: TaskModel) {\n        props.task.isFinish = props.task.isFinish ? 0 : 1;\n        await dataService.updateTask(props.task)\n    }\n\n    async function updateArchived(task: TaskModel) {\n        props.task.isArchived = props.task.isArchived ? 0 : 1;\n        await dataService.updateTaskArchived(props.task)\n    }\n    async function deleteMe() {\n        if (!window.confirm(\"Are you sure?\")) return;\n        await props.deleteMe(props.task.taskId);\n        (\"Task has been deleted\");\n    }\n\n    return (\n        <div className=\"ArchivedCard Box\">\n            <span>  task: {props.task.name} </span>\n            <br />\n            <span>  kind task: {props.task.kindTaskId} </span>\n            <br />\n            <span>  description: {props.task.description} </span>\n            <br />\n            <span>  start date: {props.task.startDate} </span>\n            <br />\n            <span> end date: {props.task.endDate} </span>\n            <br />\n            <input type=\"checkbox\" checked={props.task.isFinish === 1} /> The task is finished\n            :<button onClick={() => updateMe(props.task)}>Finish</button>\n            <br />\n            <button onClick={() => updateArchived(props.task)}>Archived</button>\n            <br />\n            <button onClick={deleteMe}>‚ùå</button>\n        </div>\n    );\n}\nexport default ArchivedCard;\n"],"mappings":";AACA,OAAOA,WAAW,MAAM,+BAA+B;AACvD,OAAO,oBAAoB;AAAC;AAO5B,SAASC,YAAY,CAACC,KAAoB,EAAe;EAErD,eAAeC,QAAQ,CAACC,IAAe,EAAE;IACrCF,KAAK,CAACE,IAAI,CAACC,QAAQ,GAAGH,KAAK,CAACE,IAAI,CAACC,QAAQ,GAAG,CAAC,GAAG,CAAC;IACjD,MAAML,WAAW,CAACM,UAAU,CAACJ,KAAK,CAACE,IAAI,CAAC;EAC5C;EAEA,eAAeG,cAAc,CAACH,IAAe,EAAE;IAC3CF,KAAK,CAACE,IAAI,CAACI,UAAU,GAAGN,KAAK,CAACE,IAAI,CAACI,UAAU,GAAG,CAAC,GAAG,CAAC;IACrD,MAAMR,WAAW,CAACS,kBAAkB,CAACP,KAAK,CAACE,IAAI,CAAC;EACpD;EACA,eAAeM,QAAQ,GAAG;IACtB,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,eAAe,CAAC,EAAE;IACtC,MAAMV,KAAK,CAACQ,QAAQ,CAACR,KAAK,CAACE,IAAI,CAACS,MAAM,CAAC;IACtC,uBAAuB;EAC5B;EAEA,oBACI;IAAK,SAAS,EAAC,kBAAkB;IAAA,wBAC7B;MAAA,WAAM,UAAQ,EAACX,KAAK,CAACE,IAAI,CAACU,IAAI,EAAC,GAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QAAO,eACvC;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAA,WAAM,eAAa,EAACZ,KAAK,CAACE,IAAI,CAACW,UAAU,EAAC,GAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QAAO,eAClD;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAA,WAAM,iBAAe,EAACb,KAAK,CAACE,IAAI,CAACY,WAAW,EAAC,GAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QAAO,eACrD;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAA,WAAM,gBAAc,EAACd,KAAK,CAACE,IAAI,CAACa,SAAS,EAAC,GAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QAAO,eAClD;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAA,WAAM,aAAW,EAACf,KAAK,CAACE,IAAI,CAACc,OAAO,EAAC,GAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QAAO,eAC7C;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAO,IAAI,EAAC,UAAU;MAAC,OAAO,EAAEhB,KAAK,CAACE,IAAI,CAACC,QAAQ,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QAAG,2BAC5D;MAAQ,OAAO,EAAE,MAAMF,QAAQ,CAACD,KAAK,CAACE,IAAI,CAAE;MAAA,UAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAS,eAC7D;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAQ,OAAO,EAAE,MAAMG,cAAc,CAACL,KAAK,CAACE,IAAI,CAAE;MAAA,UAAC;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAS,eACpE;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAQ,OAAO,EAAEM,QAAS;MAAA,UAAC;IAAC;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QACnC;AAEd;AAAC,KArCQT,YAAY;AAsCrB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}