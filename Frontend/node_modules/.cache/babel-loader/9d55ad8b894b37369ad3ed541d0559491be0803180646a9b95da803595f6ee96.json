{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\javascript\\\\Project React Tasks 3\\\\Frontend\\\\src\\\\Components\\\\DataArea\\\\KindTaskList\\\\KindTaskList.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport dataService from \"../../../Services/DataService\";\nimport DataCard from \"../DataCard/DataCard\";\nimport \"./KindTaskList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction KindTaskList() {\n  _s();\n  const [kindTasks, setKindTask] = useState([]);\n  const [tasks, setTask] = useState([]);\n  useEffect(() => {\n    dataService.getAllTasksByKindTask().then(task => setKindTask(task)).catch(err => console.log(err));\n  }, []);\n  async function name(args) {\n    try {\n      const kindTaskId = +args.target.value;\n      const dbTheater = await dataService.getTaskByKindTask(kindTaskId);\n      console.log(dbTheater);\n      setTask(dbTheater);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  function amountTasks() {\n    let tasks = dataService.getAllTasksByKindTask();\n    tasks;\n  }\n  async function deleteClickedTask(taskId) {\n    await dataService.deleteTask(taskId);\n    const duplicatedMovies = [...tasks];\n    const index = duplicatedMovies.findIndex(t => t.taskId === taskId);\n    duplicatedMovies.splice(index, 1);\n    setTask(duplicatedMovies);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"KindTaskList box\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row row-cols-1 row-cols-md-6 g-4 wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Choose your task \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        defaultValue: \"\",\n        onChange: name,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          disabled: true,\n          value: \"\",\n          children: \"select kind task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 22\n        }, this), kindTasks.map(t => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: t.kindTaskId,\n          children: t.taskName\n        }, t.kindTaskId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 41\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), tasks.map(item => /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Amount Tasks = \", item.taskCount++]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 38\n      }, this)), tasks.map(item => /*#__PURE__*/_jsxDEV(DataCard, {\n        task: item,\n        deleteMe: deleteClickedTask\n      }, item.taskId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 38\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_s(KindTaskList, \"t6b06oOwwzimYSY3DcmiXN87jGA=\");\n_c = KindTaskList;\nexport default KindTaskList;\nvar _c;\n$RefreshReg$(_c, \"KindTaskList\");","map":{"version":3,"names":["useEffect","useState","dataService","DataCard","KindTaskList","kindTasks","setKindTask","tasks","setTask","getAllTasksByKindTask","then","task","catch","err","console","log","name","args","kindTaskId","target","value","dbTheater","getTaskByKindTask","amountTasks","deleteClickedTask","taskId","deleteTask","duplicatedMovies","index","findIndex","t","splice","map","taskName","item","taskCount"],"sources":["C:/Users/User/Desktop/javascript/Project React Tasks 3/Frontend/src/Components/DataArea/KindTaskList/KindTaskList.tsx"],"sourcesContent":["import { ChangeEvent, useEffect, useState } from \"react\";\nimport dataService from \"../../../Services/DataService\";\nimport kindTask from \"../../../Models/KindTaskModel\";\nimport TaskModel from \"../../../Models/TaskModel\";\nimport DataCard from \"../DataCard/DataCard\";\nimport \"./KindTaskList.css\";\n\nfunction KindTaskList(): JSX.Element {\n\n    const [kindTasks, setKindTask] = useState<kindTask[]>([]);\n    const [tasks, setTask] = useState<TaskModel[]>([]);\n\n    useEffect(() => {\n        dataService.getAllTasksByKindTask()\n            .then(task => setKindTask(task))\n            .catch(err => console.log(err))\n    }, [])\n\n    async function name(args: ChangeEvent<HTMLSelectElement>) {\n        try {\n            const kindTaskId = +args.target.value;\n            const dbTheater = await dataService.getTaskByKindTask(kindTaskId)\n            console.log(dbTheater)\n            setTask(dbTheater)\n        }\n        catch (err) {\n            console.log(err)\n        }\n    }\n\n   function amountTasks(){\n        let tasks = dataService.getAllTasksByKindTask()\n        tasks\n   }\n\n    async function deleteClickedTask(taskId: number) {\n        await dataService.deleteTask(taskId);\n        const duplicatedMovies = [...tasks];\n        const index = duplicatedMovies.findIndex(t => t.taskId === taskId);\n        duplicatedMovies.splice(index, 1);\n        setTask(duplicatedMovies);\n    }\n\n    return (\n        <div className=\"KindTaskList box\">\n            <div className=\"row row-cols-1 row-cols-md-6 g-4 wrapper\">\n                <h1>Choose your task </h1>\n                <select defaultValue=\"\" onChange={name}>\n                    {<option disabled value=\"\">select kind task</option>}\n                    {kindTasks.map(t => <option key={t.kindTaskId} value={t.kindTaskId}>{t.taskName}</option>)}\n                </select>\n                {tasks.map((item) => <h3>Amount Tasks = {item.taskCount++}</h3>)}\n                {tasks.map((item) => <DataCard key={item.taskId} task={item} deleteMe={deleteClickedTask} />)}\n            </div>\n        </div>\n    );\n}\nexport default KindTaskList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}