{"ast":null,"code":"import axios from \"axios\";\nimport appConfig from \"../Utils/AppConfig\";\nimport { TaskActionType, tasksStore } from \"../Redux/taskState\";\nclass DataService {\n  async getAllTask() {\n    try {\n      let tasks = tasksStore.getState().tasks;\n      if (tasks.length === 0) {\n        const response = await axios.get(appConfig.tasksUrl);\n        tasks = response.data;\n        tasksStore.dispatch({\n          type: TaskActionType.FetchTasks,\n          payload: tasks\n        });\n      }\n      return tasks;\n    } catch (err) {\n      con;\n    }\n  }\n  async getAllTasksByKindTask() {\n    try {\n      let kindTask = tasksStore.getState().kindTask;\n      const response = await axios.get(appConfig.kindTasksUrl);\n      kindTask = response.data;\n      return kindTask;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async addTask(task) {\n    try {\n      const headers = {\n        \"Content-Type\": \"multipart/form-data\"\n      };\n      const response = await axios.post(appConfig.tasksUrl, task, {\n        headers\n      });\n      const addedTask = response.data;\n      tasksStore.dispatch({\n        type: TaskActionType.AddTask,\n        payload: addedTask\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async deleteTask(taskId) {\n    try {\n      await axios.delete(appConfig.tasksUrl + taskId);\n      tasksStore.dispatch({\n        type: TaskActionType.DeleteTask,\n        payload: taskId\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async updateTask(task) {\n    try {\n      const headers = {\n        \"Content-Type\": \"multipart/form-data\"\n      };\n      const response = await axios.put(appConfig.finishUrl + task.taskId, task, {\n        headers\n      });\n      const updateTask = response.data;\n      console.log(updateTask);\n      tasksStore.dispatch({\n        type: TaskActionType.UpdateTask,\n        payload: updateTask\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async updateTaskArchived(task) {\n    try {\n      const headers = {\n        \"Content-Type\": \"multipart/form-data\"\n      };\n      const response = await axios.put(appConfig.archivedUrl + task.taskId, task, {\n        headers\n      });\n      const updateTask = response.data;\n      let tasks = await dataService.getAllTask();\n      const index = tasks.findIndex(t => t.taskId === task.taskId);\n      tasks[index].isArchived = task.isArchived;\n      await dataService.getAllTask();\n      tasksStore.dispatch({\n        type: TaskActionType.UpdateTask,\n        payload: updateTask\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async getAllArchivedTasks() {\n    let tasks = await this.getAllTask();\n    tasks = tasks.filter(task => task.isArchived || dataService.isMoreThanWeekFromNow(task));\n    await this.getAllTask();\n    return tasks;\n  }\n  async getAllTasks2() {\n    try {\n      let tasks = await this.getAllTask();\n      tasks = tasks.filter(task => !task.isArchived && !dataService.isMoreThanWeekFromNow(task));\n      await this.getAllTask();\n      tasksStore.dispatch({\n        type: TaskActionType.UpdateTask,\n        payload: tasks\n      });\n      return tasks;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async getTasksOfToday() {\n    try {\n      let tasks = await this.getAllTask();\n      const day = new Date().getDay();\n      const taskToday = tasks.filter(task => new Date(task.startDate).getDay() <= day);\n      await this.getAllTask();\n      return taskToday;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async getTasksOfTomorrow() {\n    try {\n      let tasks = await this.getAllTask();\n      const day = new Date().getDay() + 1;\n      const taskTomorrow = tasks.filter(task => new Date(task.startDate).getDay() + 1 >= day);\n      await this.getAllTask();\n      return taskTomorrow;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  isMoreThanWeekFromNow(task) {\n    const currentDate = new Date();\n    const taskStartDateParts = task.startDate.split('-');\n    const validDate = new Date(taskStartDateParts[2], taskStartDateParts[1] - 1, taskStartDateParts[0]);\n    const currentTime = currentDate.getTime();\n    const week = 7 * 24 * 60 * 60 * 1000;\n    const calcDayOver = currentTime - validDate.getTime();\n    return calcDayOver > week;\n  }\n}\nconst dataService = new DataService();\nexport default dataService;","map":{"version":3,"names":["axios","appConfig","TaskActionType","tasksStore","DataService","getAllTask","tasks","getState","length","response","get","tasksUrl","data","dispatch","type","FetchTasks","payload","err","con","getAllTasksByKindTask","kindTask","kindTasksUrl","console","log","addTask","task","headers","post","addedTask","AddTask","deleteTask","taskId","delete","DeleteTask","updateTask","put","finishUrl","UpdateTask","updateTaskArchived","archivedUrl","dataService","index","findIndex","t","isArchived","getAllArchivedTasks","filter","isMoreThanWeekFromNow","getAllTasks2","getTasksOfToday","day","Date","getDay","taskToday","startDate","getTasksOfTomorrow","taskTomorrow","currentDate","taskStartDateParts","split","validDate","currentTime","getTime","week","calcDayOver"],"sources":["C:/Users/User/Desktop/javascript/Project React Tasks 3/Frontend/src/Services/DataService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport appConfig from \"../Utils/AppConfig\";\r\nimport TaskModel from \"../Models/TaskModel\";\r\nimport kindTask from \"../Models/KindTaskModel\";\r\nimport { TaskActionType, tasksStore } from \"../Redux/taskState\";\r\n\r\nclass DataService {\r\n\r\n    async getAllTask(): Promise<TaskModel[]> {\r\n        try{\r\n            let tasks = tasksStore.getState().tasks;\r\n            if (tasks.length === 0) {\r\n                const response = await axios.get<TaskModel[]>(appConfig.tasksUrl);\r\n                tasks = response.data;\r\n                tasksStore.dispatch({ type: TaskActionType.FetchTasks, payload: tasks })\r\n            }\r\n            return tasks;\r\n        }catch(err){\r\n            con\r\n        }\r\n    }\r\n\r\n    async getAllTasksByKindTask(): Promise<kindTask[]> {\r\n        try {\r\n            let kindTask = tasksStore.getState().kindTask;\r\n            const response = await axios.get<kindTask[]>(appConfig.kindTasksUrl);\r\n            kindTask = response.data;\r\n            return kindTask;\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async addTask(task: TaskModel): Promise<void> {\r\n        try {\r\n            const headers = { \"Content-Type\": \"multipart/form-data\" };\r\n            const response = await axios.post<TaskModel>(appConfig.tasksUrl, task, { headers })\r\n            const addedTask = response.data;\r\n            tasksStore.dispatch({ type: TaskActionType.AddTask, payload: addedTask })\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async deleteTask(taskId: number): Promise<void> {\r\n        try {\r\n            await axios.delete(appConfig.tasksUrl + taskId);\r\n            tasksStore.dispatch({ type: TaskActionType.DeleteTask, payload: taskId })\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    async updateTask(task: TaskModel): Promise<void> {\r\n        try {\r\n            const headers = { \"Content-Type\": \"multipart/form-data\" };\r\n            const response = await axios.put<TaskModel>(appConfig.finishUrl + task.taskId, task, { headers });\r\n            const updateTask = response.data;\r\n            console.log(updateTask);\r\n            tasksStore.dispatch({ type: TaskActionType.UpdateTask, payload: updateTask });\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async updateTaskArchived(task: TaskModel): Promise<void> {\r\n        try {\r\n            const headers = { \"Content-Type\": \"multipart/form-data\" };\r\n            const response = await axios.put<TaskModel>(appConfig.archivedUrl + task.taskId, task, { headers });\r\n            const updateTask = response.data;\r\n            let tasks = await dataService.getAllTask()\r\n            const index = tasks.findIndex(t => t.taskId === task.taskId);\r\n            tasks[index].isArchived = task.isArchived;\r\n            await dataService.getAllTask()\r\n            tasksStore.dispatch({ type: TaskActionType.UpdateTask, payload: updateTask });\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n    async getAllArchivedTasks(): Promise<TaskModel[]> {\r\n        let tasks = await this.getAllTask();\r\n        tasks = tasks.filter((task: TaskModel) => (task.isArchived || dataService.isMoreThanWeekFromNow(task)))\r\n        await this.getAllTask();\r\n        return tasks;\r\n    }\r\n\r\n    async getAllTasks2(): Promise<TaskModel[]> {\r\n        try {\r\n            let tasks = await this.getAllTask();\r\n            tasks = tasks.filter((task: TaskModel) => (!task.isArchived && !dataService.isMoreThanWeekFromNow(task)))\r\n            await this.getAllTask();\r\n            tasksStore.dispatch({ type: TaskActionType.UpdateTask, payload: tasks });\r\n            return tasks;\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async getTasksOfToday(): Promise<TaskModel[]> {\r\n        try{\r\n            let tasks = await this.getAllTask();\r\n            const day = new Date().getDay();\r\n            const taskToday = tasks.filter((task) => new Date(task.startDate).getDay() <= day);\r\n            await this.getAllTask();\r\n            return taskToday;\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async getTasksOfTomorrow(): Promise<TaskModel[]> {\r\n        try{\r\n            let tasks = await this.getAllTask();\r\n            const day = new Date().getDay() + 1;\r\n            const taskTomorrow = tasks.filter((task) => new Date(task.startDate).getDay() + 1 >= day)\r\n            await this.getAllTask();\r\n            return taskTomorrow;\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    isMoreThanWeekFromNow(task: TaskModel) {\r\n\r\n        const currentDate = new Date();\r\n\r\n        const taskStartDateParts: any = task.startDate.split('-');\r\n\r\n        const validDate = new Date(taskStartDateParts[2], taskStartDateParts[1] - 1, taskStartDateParts[0]);\r\n\r\n        const currentTime = currentDate.getTime();\r\n\r\n        const week = (7 * 24 * 60 * 60 * 1000);\r\n\r\n        const calcDayOver = currentTime - validDate.getTime()\r\n\r\n        return calcDayOver > week;\r\n    }\r\n}\r\nconst dataService = new DataService();\r\nexport default dataService;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}