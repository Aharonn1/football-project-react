{"ast":null,"code":"import axios from \"axios\";\nimport appConfig from \"../Utils/AppConfig\";\nimport { PlayersActionType, playersStore } from \"../Redux/taskState\";\nclass DataService {\n  async getAllPlayers() {\n    try {\n      let players = playersStore.getState().players;\n      if (players.length === 0) {\n        const response = await axios.get(appConfig.playersUrl);\n        players = response.data;\n        playersStore.dispatch({\n          type: PlayersActionType.FetchPlayers,\n          payload: players\n        });\n      }\n      return players;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async getTheTable() {\n    try {\n      let table = playersStore.getState().table;\n      if (table.length === 0) {\n        const response = await axios.get(appConfig.playersUrl);\n        table = response.data;\n        tasksStore.dispatch({\n          type: TaskActionType.FetchTasks,\n          payload: table\n        });\n      }\n      return table;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async getAllTasksByKindTask() {\n    try {\n      let kindTask = tasksStore.getState().kindTask;\n      const response = await axios.get(appConfig.countriesUrl);\n      kindTask = response.data;\n      return kindTask;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async getTaskByKindTask(kindTaskId) {\n    let kindTask = tasksStore.getState().tasks;\n    let task = kindTask.find(t => t.playerId === kindTaskId);\n    if (!task) {\n      const response = await axios.get(appConfig.taskByTaskUrl + kindTaskId);\n      kindTask = response.data;\n    }\n    return kindTask;\n  }\n  async addTask(task) {\n    try {\n      const headers = {\n        \"Content-Type\": \"multipart/form-data\"\n      };\n      const response = await axios.post(appConfig.playersUrl, task, {\n        headers\n      });\n      const addedTask = response.data;\n      tasksStore.dispatch({\n        type: TaskActionType.AddTask,\n        payload: addedTask\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async deleteTask(taskId) {\n    try {\n      await axios.delete(appConfig.playersUrl + taskId);\n      tasksStore.dispatch({\n        type: TaskActionType.DeleteTask,\n        payload: taskId\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async updateTask(task) {\n    try {\n      const headers = {\n        \"Content-Type\": \"multipart/form-data\"\n      };\n      const response = await axios.put(appConfig.playersUrl + task.playerId, task, {\n        headers\n      });\n      const updateTask = response.data;\n      console.log(updateTask);\n      tasksStore.dispatch({\n        type: TaskActionType.UpdateTask,\n        payload: updateTask\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n}\nconst dataService = new DataService();\nexport default dataService;","map":{"version":3,"names":["axios","appConfig","PlayersActionType","playersStore","DataService","getAllPlayers","players","getState","length","response","get","playersUrl","data","dispatch","type","FetchPlayers","payload","err","console","log","getTheTable","table","tasksStore","TaskActionType","FetchTasks","getAllTasksByKindTask","kindTask","countriesUrl","getTaskByKindTask","kindTaskId","tasks","task","find","t","playerId","taskByTaskUrl","addTask","headers","post","addedTask","AddTask","deleteTask","taskId","delete","DeleteTask","updateTask","put","UpdateTask","dataService"],"sources":["C:/Users/User/Desktop/javascript/manchester project/Frontend/src/Services/DataService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport appConfig from \"../Utils/AppConfig\";\r\nimport TeamModel from \"../Models/TeamModel\";\r\nimport CountryModel from \"../Models/CountryModel\";\r\nimport TableModel from \"../Models/TableModel\";\r\nimport { PlayersActionType, playersStore } from \"../Redux/taskState\";\r\n\r\nclass DataService {\r\n\r\n    async getAllPlayers(): Promise<TeamModel[]> {\r\n        try {\r\n            let players = playersStore.getState().players;\r\n            if (players.length === 0) {\r\n                const response = await axios.get<TeamModel[]>(appConfig.playersUrl);\r\n                players = response.data;\r\n                playersStore.dispatch({ type: PlayersActionType.FetchPlayers, payload: players })\r\n            }\r\n            return players;\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async getTheTable(): Promise<TableModel[]> {\r\n        try {\r\n            let table = playersStore.getState().table;\r\n            if (table.length === 0) {\r\n                const response = await axios.get<TableModel[]>(appConfig.playersUrl);\r\n                table = response.data;\r\n                tasksStore.dispatch({ type: TaskActionType.FetchTasks, payload: table })\r\n            }\r\n            return table;\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async getAllTasksByKindTask(): Promise<CountryModel[]> {\r\n        try {\r\n            let kindTask = tasksStore.getState().kindTask;\r\n            const response = await axios.get<CountryModel[]>(appConfig.countriesUrl);\r\n            kindTask = response.data;\r\n            return kindTask;\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async getTaskByKindTask(kindTaskId: number): Promise<TeamModel[]> {\r\n        let kindTask = tasksStore.getState().tasks\r\n        let task = kindTask.find(t => t.playerId === kindTaskId)\r\n        if (!task) {\r\n            const response = await axios.get<TeamModel[]>(appConfig.taskByTaskUrl + kindTaskId);\r\n            kindTask = response.data;\r\n        }\r\n        return kindTask;\r\n    }\r\n\r\n\r\n    async addTask(task: TeamModel): Promise<void> {\r\n        try {\r\n            const headers = { \"Content-Type\": \"multipart/form-data\" };\r\n            const response = await axios.post<TeamModel>(appConfig.playersUrl, task, { headers })\r\n            const addedTask = response.data;\r\n            tasksStore.dispatch({ type: TaskActionType.AddTask, payload: addedTask })\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async deleteTask(taskId: number): Promise<void> {\r\n        try {\r\n            await axios.delete(appConfig.playersUrl + taskId);\r\n            tasksStore.dispatch({ type: TaskActionType.DeleteTask, payload: taskId })\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    async updateTask(task: TeamModel): Promise<void> {\r\n        try {\r\n            const headers = { \"Content-Type\": \"multipart/form-data\" };\r\n            const response = await axios.put<TeamModel>(appConfig.playersUrl + task.playerId, task, { headers });\r\n            const updateTask = response.data;\r\n            console.log(updateTask);\r\n            tasksStore.dispatch({ type: TaskActionType.UpdateTask, payload: updateTask });\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n}\r\nconst dataService = new DataService();\r\nexport default dataService;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}