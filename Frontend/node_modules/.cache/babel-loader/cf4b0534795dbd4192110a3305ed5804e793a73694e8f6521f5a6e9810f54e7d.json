{"ast":null,"code":"// import axios from \"axios\";\n// import appConfig from \"../Utils/AppConfig\";\n// import TaskModel from \"../Models/TaskModel\";\n// import kindTask from \"../Models/KindTaskModel\";\n// import { TaskActionType, tasksStore } from \"../Redux/taskState\";\n\n// class DataService {\n\n//     async getAllTask(): Promise<TaskModel[]> {\n//         try {\n//             let tasks = tasksStore.getState().tasks;\n//             if (tasks.length === 0) {\n//                 const response = await axios.get<TaskModel[]>(appConfig.tasksUrl);\n//                 tasks = response.data;\n//                 tasksStore.dispatch({ type: TaskActionType.FetchTasks, payload: tasks })\n//             }\n//             return tasks;\n//         } catch (err) {\n//             console.log(err)\n//         }\n//     }\n\n//     async getAllTasksByKindTask(): Promise<kindTask[]> {\n//         try {\n//             let kindTask = tasksStore.getState().kindTask;\n//             const response = await axios.get<kindTask[]>(appConfig.kindTasksUrl);\n//             kindTask = response.data;\n//             return kindTask;\n//         } catch (err) {\n//             console.log(err)\n//         }\n//     }\n\n//     async getTaskByKindTask(kindTaskId: number): Promise<TaskModel[]> {\n//         let kindTask = tasksStore.getState().tasks\n//         let task = kindTask.find(t => t.kindTaskId === kindTaskId)\n//         if (!task) {\n//             const response = await axios.get<TaskModel[]>(appConfig.taskByTaskUrl + kindTaskId);\n//             kindTask = response.data;\n//         }\n//         return kindTask;\n//     }\n\n//     async addTask(task: TaskModel): Promise<void> {\n//         try {\n//             const headers = { \"Content-Type\": \"multipart/form-data\" };\n//             const response = await axios.post<TaskModel>(appConfig.tasksUrl, task, { headers })\n//             const addedTask = response.data;\n//             tasksStore.dispatch({ type: TaskActionType.AddTask, payload: addedTask })\n//         } catch (err) {\n//             console.log(err)\n//         }\n//     }\n\n//     async deleteTask(taskId: number): Promise<void> {\n//         try {\n//             await axios.delete(appConfig.tasksUrl + taskId);\n//             tasksStore.dispatch({ type: TaskActionType.DeleteTask, payload: taskId })\n//         } catch (err) {\n//             console.log(err);\n//         }\n//     }\n\n//     async updateTask(task: TaskModel): Promise<void> {\n//         try {\n//             const headers = { \"Content-Type\": \"multipart/form-data\" };\n//             const response = await axios.put<TaskModel>(appConfig.finishUrl + task.taskId, task, { headers });\n//             const updateTask = response.data;\n//             console.log(updateTask);\n//             tasksStore.dispatch({ type: TaskActionType.UpdateTask, payload: updateTask });\n//         } catch (err) {\n//             console.log(err)\n//         }\n//     }\n\n//     async updateTaskArchived(task: TaskModel): Promise<void> {\n//         try {\n//             const headers = { \"Content-Type\": \"multipart/form-data\" };\n//             const response = await axios.put<TaskModel>(appConfig.archivedUrl + task.taskId, task, { headers });\n//             const updateTask = response.data;\n//             let tasks = await dataService.getAllTask()\n//             const index = tasks.findIndex(t => t.taskId === task.taskId);\n//             tasks[index].isArchived = task.isArchived;\n//             await dataService.getAllTask()\n//             tasksStore.dispatch({ type: TaskActionType.UpdateTask, payload: updateTask });\n//         } catch (err) {\n//             console.log(err)\n//         }\n//     }\n//     async getAllArchivedTasks(): Promise<TaskModel[]> {\n//         let tasks = await this.getAllTask();\n//         tasks = tasks.filter((task: TaskModel) => (task.isArchived || dataService.isMoreThanWeekFromNow()))\n//         await this.getAllTask();\n//         return tasks;\n//     }\n\n//     async getAllTasksAreNotArchived(): Promise<TaskModel[]> {\n//         try {\n//             let tasks = await this.getAllTask();\n//             tasks = tasks.filter((task: TaskModel) => (!task.isArchived && !dataService.isMoreThanWeekFromNow()))\n//             await this.getAllTask();\n//             tasksStore.dispatch({ type: TaskActionType.UpdateTask, payload: tasks });\n//             return tasks;\n//         } catch (err) {\n//             console.log(err)\n//         }\n//     }\n\n//     async getTasksOfTomorrow(): Promise<TaskModel[]> {\n//         try {\n//             let tasks = await this.getAllTask();\n//             const day = new Date().getDay() + 1;\n//             console.log(day)\n//             const taskToday = tasks.filter((task) => new Date(task.startDate).getDay() < day)\n//             await this.getAllTask();\n//             // console.log(taskToday)\n//             return taskToday;\n//         } catch (err) {\n//             console.log(err)\n//         }\n//     }\n\n//     async getTasksOfToday(): Promise<TaskModel[]> {\n//         try {\n//             let tasks = await this.getAllTask();\n//             const day = new Date().getDate().toString();\n//             console.log(day)            \n//             const taskTomorrow = tasks.filter((task) => task.startDate === day)\n//             await this.getAllTask();\n//             return taskTomorrow;\n//         } catch (err) {\n//             console.log(err)\n//         }\n//     }\n\n//     async getTasksFinished(): Promise<TaskModel[]> {\n//         try {\n//             let tasks = await this.getAllTask();\n//             const taskFinished = tasks.filter((task) => task.isFinish === 1)\n//             await this.getAllTask();\n//             return taskFinished;\n//         } catch (err) {\n//             console.log(err)\n//         }\n//     }\n\n//     async isMoreThanWeekFromNow(): Promise<TaskModel[]> {\n//         const day = new Date().getDate() - 7;\n//         const month = new Date().getMonth();\n//         let movies = await this.getAllTask();\n//         const moviesActive = movies.filter(m => new Date(m.startDate).getDate() <= day)\n//         return moviesActive;\n//     }\n\n//     // isMoreThanWeekFromNow(task: TaskModel) {\n\n//     //     const currentDate = new Date();\n\n//     //     const taskStartDateParts: any = task.startDate.split('-');\n\n//     //     const validDate = new Date(taskStartDateParts[2], taskStartDateParts[1] - 1, taskStartDateParts[0]);\n\n//     //     const currentTime = currentDate.getTime();\n\n//     //     const week = (7 * 24 * 60 * 60 * 1000);\n\n//     //     const calcDayOver = currentTime - validDate.getTime()\n\n//     //     return calcDayOver > week;\n//     // }\n// }\n// const dataService = new DataService();\n// export default dataService;","map":{"version":3,"names":[],"sources":["C:/Users/User/Desktop/Avi Projects/Project React Tasks 3/Frontend/src/Services/DataService.ts"],"sourcesContent":["// import axios from \"axios\";\r\n// import appConfig from \"../Utils/AppConfig\";\r\n// import TaskModel from \"../Models/TaskModel\";\r\n// import kindTask from \"../Models/KindTaskModel\";\r\n// import { TaskActionType, tasksStore } from \"../Redux/taskState\";\r\n\r\n// class DataService {\r\n\r\n//     async getAllTask(): Promise<TaskModel[]> {\r\n//         try {\r\n//             let tasks = tasksStore.getState().tasks;\r\n//             if (tasks.length === 0) {\r\n//                 const response = await axios.get<TaskModel[]>(appConfig.tasksUrl);\r\n//                 tasks = response.data;\r\n//                 tasksStore.dispatch({ type: TaskActionType.FetchTasks, payload: tasks })\r\n//             }\r\n//             return tasks;\r\n//         } catch (err) {\r\n//             console.log(err)\r\n//         }\r\n//     }\r\n\r\n//     async getAllTasksByKindTask(): Promise<kindTask[]> {\r\n//         try {\r\n//             let kindTask = tasksStore.getState().kindTask;\r\n//             const response = await axios.get<kindTask[]>(appConfig.kindTasksUrl);\r\n//             kindTask = response.data;\r\n//             return kindTask;\r\n//         } catch (err) {\r\n//             console.log(err)\r\n//         }\r\n//     }\r\n\r\n//     async getTaskByKindTask(kindTaskId: number): Promise<TaskModel[]> {\r\n//         let kindTask = tasksStore.getState().tasks\r\n//         let task = kindTask.find(t => t.kindTaskId === kindTaskId)\r\n//         if (!task) {\r\n//             const response = await axios.get<TaskModel[]>(appConfig.taskByTaskUrl + kindTaskId);\r\n//             kindTask = response.data;\r\n//         }\r\n//         return kindTask;\r\n//     }\r\n\r\n\r\n//     async addTask(task: TaskModel): Promise<void> {\r\n//         try {\r\n//             const headers = { \"Content-Type\": \"multipart/form-data\" };\r\n//             const response = await axios.post<TaskModel>(appConfig.tasksUrl, task, { headers })\r\n//             const addedTask = response.data;\r\n//             tasksStore.dispatch({ type: TaskActionType.AddTask, payload: addedTask })\r\n//         } catch (err) {\r\n//             console.log(err)\r\n//         }\r\n//     }\r\n\r\n//     async deleteTask(taskId: number): Promise<void> {\r\n//         try {\r\n//             await axios.delete(appConfig.tasksUrl + taskId);\r\n//             tasksStore.dispatch({ type: TaskActionType.DeleteTask, payload: taskId })\r\n//         } catch (err) {\r\n//             console.log(err);\r\n//         }\r\n//     }\r\n\r\n//     async updateTask(task: TaskModel): Promise<void> {\r\n//         try {\r\n//             const headers = { \"Content-Type\": \"multipart/form-data\" };\r\n//             const response = await axios.put<TaskModel>(appConfig.finishUrl + task.taskId, task, { headers });\r\n//             const updateTask = response.data;\r\n//             console.log(updateTask);\r\n//             tasksStore.dispatch({ type: TaskActionType.UpdateTask, payload: updateTask });\r\n//         } catch (err) {\r\n//             console.log(err)\r\n//         }\r\n//     }\r\n\r\n//     async updateTaskArchived(task: TaskModel): Promise<void> {\r\n//         try {\r\n//             const headers = { \"Content-Type\": \"multipart/form-data\" };\r\n//             const response = await axios.put<TaskModel>(appConfig.archivedUrl + task.taskId, task, { headers });\r\n//             const updateTask = response.data;\r\n//             let tasks = await dataService.getAllTask()\r\n//             const index = tasks.findIndex(t => t.taskId === task.taskId);\r\n//             tasks[index].isArchived = task.isArchived;\r\n//             await dataService.getAllTask()\r\n//             tasksStore.dispatch({ type: TaskActionType.UpdateTask, payload: updateTask });\r\n//         } catch (err) {\r\n//             console.log(err)\r\n//         }\r\n//     }\r\n//     async getAllArchivedTasks(): Promise<TaskModel[]> {\r\n//         let tasks = await this.getAllTask();\r\n//         tasks = tasks.filter((task: TaskModel) => (task.isArchived || dataService.isMoreThanWeekFromNow()))\r\n//         await this.getAllTask();\r\n//         return tasks;\r\n//     }\r\n\r\n//     async getAllTasksAreNotArchived(): Promise<TaskModel[]> {\r\n//         try {\r\n//             let tasks = await this.getAllTask();\r\n//             tasks = tasks.filter((task: TaskModel) => (!task.isArchived && !dataService.isMoreThanWeekFromNow()))\r\n//             await this.getAllTask();\r\n//             tasksStore.dispatch({ type: TaskActionType.UpdateTask, payload: tasks });\r\n//             return tasks;\r\n//         } catch (err) {\r\n//             console.log(err)\r\n//         }\r\n//     }\r\n\r\n//     async getTasksOfTomorrow(): Promise<TaskModel[]> {\r\n//         try {\r\n//             let tasks = await this.getAllTask();\r\n//             const day = new Date().getDay() + 1;\r\n//             console.log(day)\r\n//             const taskToday = tasks.filter((task) => new Date(task.startDate).getDay() < day)\r\n//             await this.getAllTask();\r\n//             // console.log(taskToday)\r\n//             return taskToday;\r\n//         } catch (err) {\r\n//             console.log(err)\r\n//         }\r\n//     }\r\n\r\n//     async getTasksOfToday(): Promise<TaskModel[]> {\r\n//         try {\r\n//             let tasks = await this.getAllTask();\r\n//             const day = new Date().getDate().toString();\r\n//             console.log(day)            \r\n//             const taskTomorrow = tasks.filter((task) => task.startDate === day)\r\n//             await this.getAllTask();\r\n//             return taskTomorrow;\r\n//         } catch (err) {\r\n//             console.log(err)\r\n//         }\r\n//     }\r\n\r\n//     async getTasksFinished(): Promise<TaskModel[]> {\r\n//         try {\r\n//             let tasks = await this.getAllTask();\r\n//             const taskFinished = tasks.filter((task) => task.isFinish === 1)\r\n//             await this.getAllTask();\r\n//             return taskFinished;\r\n//         } catch (err) {\r\n//             console.log(err)\r\n//         }\r\n//     }\r\n\r\n//     async isMoreThanWeekFromNow(): Promise<TaskModel[]> {\r\n//         const day = new Date().getDate() - 7;\r\n//         const month = new Date().getMonth();\r\n//         let movies = await this.getAllTask();\r\n//         const moviesActive = movies.filter(m => new Date(m.startDate).getDate() <= day)\r\n//         return moviesActive;\r\n//     }\r\n\r\n//     // isMoreThanWeekFromNow(task: TaskModel) {\r\n\r\n//     //     const currentDate = new Date();\r\n\r\n//     //     const taskStartDateParts: any = task.startDate.split('-');\r\n\r\n//     //     const validDate = new Date(taskStartDateParts[2], taskStartDateParts[1] - 1, taskStartDateParts[0]);\r\n\r\n//     //     const currentTime = currentDate.getTime();\r\n\r\n//     //     const week = (7 * 24 * 60 * 60 * 1000);\r\n\r\n//     //     const calcDayOver = currentTime - validDate.getTime()\r\n\r\n//     //     return calcDayOver > week;\r\n//     // }\r\n// }\r\n// const dataService = new DataService();\r\n// export default dataService;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}