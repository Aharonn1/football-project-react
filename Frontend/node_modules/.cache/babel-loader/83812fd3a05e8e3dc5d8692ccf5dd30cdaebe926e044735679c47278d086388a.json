{"ast":null,"code":"import axios from \"axios\";\nimport appConfig from \"../Utils/AppConfig\";\nimport { TaskActionType, tasksStore } from \"../Redux/taskState\";\nclass DataService {\n  async getAllTask() {\n    try {\n      let tasks = tasksStore.getState().tasks;\n      if (tasks.length === 0) {\n        const response = await axios.get(appConfig.tasksUrl);\n        tasks = response.data;\n        tasksStore.dispatch({\n          type: TaskActionType.FetchTasks,\n          payload: tasks\n        });\n      }\n      return tasks;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async getAllTasksByKindTask() {\n    try {\n      let kindTask = tasksStore.getState().kindTask;\n      const response = await axios.get(appConfig.kindTasksUrl);\n      kindTask = response.data;\n      return kindTask;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async getTaskByKindTask(kindTaskId) {\n    let kindTask = tasksStore.getState().tasks;\n    let task = kindTask.find(t => t.kindTaskId === kindTaskId);\n    if (!task) {\n      const response = await axios.get(appConfig.taskByTaskUrl + kindTaskId);\n      kindTask = response.data;\n    }\n    return kindTask;\n  }\n  async addTask(task) {\n    try {\n      const headers = {\n        \"Content-Type\": \"multipart/form-data\"\n      };\n      const response = await axios.post(appConfig.tasksUrl, task, {\n        headers\n      });\n      const addedTask = response.data;\n      tasksStore.dispatch({\n        type: TaskActionType.AddTask,\n        payload: addedTask\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async deleteTask(taskId) {\n    try {\n      await axios.delete(appConfig.tasksUrl + taskId);\n      tasksStore.dispatch({\n        type: TaskActionType.DeleteTask,\n        payload: taskId\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async updateTask(task) {\n    try {\n      const headers = {\n        \"Content-Type\": \"multipart/form-data\"\n      };\n      const response = await axios.put(appConfig.finishUrl + task.taskId, task, {\n        headers\n      });\n      const updateTask = response.data;\n      console.log(updateTask);\n      tasksStore.dispatch({\n        type: TaskActionType.UpdateTask,\n        payload: updateTask\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async updateTaskArchived(task) {\n    try {\n      const headers = {\n        \"Content-Type\": \"multipart/form-data\"\n      };\n      const response = await axios.put(appConfig.archivedUrl + task.taskId, task, {\n        headers\n      });\n      const updateTask = response.data;\n      let tasks = await dataService.getAllTask();\n      const index = tasks.findIndex(t => t.taskId === task.taskId);\n      tasks[index].isArchived = task.isArchived;\n      await dataService.getAllTask();\n      tasksStore.dispatch({\n        type: TaskActionType.UpdateTask,\n        payload: updateTask\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async getAllArchivedTasks() {\n    let tasks = await this.getAllTask();\n    tasks = tasks.filter(task => task.isArchived || dataService.isMoreThanWeekFromNow(task));\n    await this.getAllTask();\n    return tasks;\n  }\n  async getAllTasks2() {\n    try {\n      let tasks = await this.getAllTask();\n      tasks = tasks.filter(task => !task.isArchived && !dataService.isMoreThanWeekFromNow(task));\n      await this.getAllTask();\n      tasksStore.dispatch({\n        type: TaskActionType.UpdateTask,\n        payload: tasks\n      });\n      return tasks;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async getTasksOfTomorrow() {\n    try {\n      let tasks = await this.getAllTask();\n      const day = new Date().getDay() + 1;\n      console.log(day);\n      const taskToday = tasks.filter(task => new Date(task.startDate).getDay() < day);\n      await this.getAllTask();\n      // console.log(taskToday)\n      return taskToday;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async getTasksOfToday() {\n    try {\n      let tasks = await this.getAllTask();\n      const day = new Date().getDay();\n      console.log(day);\n      const taskTomorrow = tasks.filter(task => task.startDate === day.toString());\n      await this.getAllTask();\n      return taskTomorrow;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async getTasksFinished() {\n    try {\n      let tasks = await this.getAllTask();\n      const taskTomorrow = tasks.filter(task => task.isFinish === 1);\n      await this.getAllTask();\n      return taskTomorrow;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  isMoreThanWeekFromNow(task) {\n    const currentDate = new Date();\n    const taskStartDateParts = task.startDate.split('-');\n    const validDate = new Date(taskStartDateParts[2], taskStartDateParts[1] - 1, taskStartDateParts[0]);\n    const currentTime = currentDate.getTime();\n    const week = 7 * 24 * 60 * 60 * 1000;\n    const calcDayOver = currentTime - validDate.getTime();\n    return calcDayOver > week;\n  }\n}\nconst dataService = new DataService();\nexport default dataService;","map":{"version":3,"names":["axios","appConfig","TaskActionType","tasksStore","DataService","getAllTask","tasks","getState","length","response","get","tasksUrl","data","dispatch","type","FetchTasks","payload","err","console","log","getAllTasksByKindTask","kindTask","kindTasksUrl","getTaskByKindTask","kindTaskId","task","find","t","taskByTaskUrl","addTask","headers","post","addedTask","AddTask","deleteTask","taskId","delete","DeleteTask","updateTask","put","finishUrl","UpdateTask","updateTaskArchived","archivedUrl","dataService","index","findIndex","isArchived","getAllArchivedTasks","filter","isMoreThanWeekFromNow","getAllTasks2","getTasksOfTomorrow","day","Date","getDay","taskToday","startDate","getTasksOfToday","taskTomorrow","toString","getTasksFinished","isFinish","currentDate","taskStartDateParts","split","validDate","currentTime","getTime","week","calcDayOver"],"sources":["C:/Users/User/Desktop/javascript/Project React Tasks 3/Frontend/src/Services/DataService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport appConfig from \"../Utils/AppConfig\";\r\nimport TaskModel from \"../Models/TaskModel\";\r\nimport kindTask from \"../Models/KindTaskModel\";\r\nimport { TaskActionType, tasksStore } from \"../Redux/taskState\";\r\n\r\nclass DataService {\r\n\r\n    async getAllTask(): Promise<TaskModel[]> {\r\n        try {\r\n            let tasks = tasksStore.getState().tasks;\r\n            if (tasks.length === 0) {\r\n                const response = await axios.get<TaskModel[]>(appConfig.tasksUrl);\r\n                tasks = response.data;\r\n                tasksStore.dispatch({ type: TaskActionType.FetchTasks, payload: tasks })\r\n            }\r\n            return tasks;\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async getAllTasksByKindTask(): Promise<kindTask[]> {\r\n        try {\r\n            let kindTask = tasksStore.getState().kindTask;\r\n            const response = await axios.get<kindTask[]>(appConfig.kindTasksUrl);\r\n            kindTask = response.data;\r\n            return kindTask;\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async getTaskByKindTask(kindTaskId: number): Promise<TaskModel[]> {\r\n        let kindTask = tasksStore.getState().tasks\r\n        let task = kindTask.find(t => t.kindTaskId === kindTaskId)\r\n        if (!task) {\r\n            const response = await axios.get<TaskModel[]>(appConfig.taskByTaskUrl + kindTaskId);\r\n            kindTask = response.data;\r\n        }\r\n        return kindTask;\r\n    }\r\n\r\n\r\n    async addTask(task: TaskModel): Promise<void> {\r\n        try {\r\n            const headers = { \"Content-Type\": \"multipart/form-data\" };\r\n            const response = await axios.post<TaskModel>(appConfig.tasksUrl, task, { headers })\r\n            const addedTask = response.data;\r\n            tasksStore.dispatch({ type: TaskActionType.AddTask, payload: addedTask })\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async deleteTask(taskId: number): Promise<void> {\r\n        try {\r\n            await axios.delete(appConfig.tasksUrl + taskId);\r\n            tasksStore.dispatch({ type: TaskActionType.DeleteTask, payload: taskId })\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    async updateTask(task: TaskModel): Promise<void> {\r\n        try {\r\n            const headers = { \"Content-Type\": \"multipart/form-data\" };\r\n            const response = await axios.put<TaskModel>(appConfig.finishUrl + task.taskId, task, { headers });\r\n            const updateTask = response.data;\r\n            console.log(updateTask);\r\n            tasksStore.dispatch({ type: TaskActionType.UpdateTask, payload: updateTask });\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async updateTaskArchived(task: TaskModel): Promise<void> {\r\n        try {\r\n            const headers = { \"Content-Type\": \"multipart/form-data\" };\r\n            const response = await axios.put<TaskModel>(appConfig.archivedUrl + task.taskId, task, { headers });\r\n            const updateTask = response.data;\r\n            let tasks = await dataService.getAllTask()\r\n            const index = tasks.findIndex(t => t.taskId === task.taskId);\r\n            tasks[index].isArchived = task.isArchived;\r\n            await dataService.getAllTask()\r\n            tasksStore.dispatch({ type: TaskActionType.UpdateTask, payload: updateTask });\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n    async getAllArchivedTasks(): Promise<TaskModel[]> {\r\n        let tasks = await this.getAllTask();\r\n        tasks = tasks.filter((task: TaskModel) => (task.isArchived || dataService.isMoreThanWeekFromNow(task)))\r\n        await this.getAllTask();\r\n        return tasks;\r\n    }\r\n\r\n    async getAllTasks2(): Promise<TaskModel[]> {\r\n        try {\r\n            let tasks = await this.getAllTask();\r\n            tasks = tasks.filter((task: TaskModel) => (!task.isArchived && !dataService.isMoreThanWeekFromNow(task)))\r\n            await this.getAllTask();\r\n            tasksStore.dispatch({ type: TaskActionType.UpdateTask, payload: tasks });\r\n            return tasks;\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async getTasksOfTomorrow(): Promise<TaskModel[]> {\r\n        try {\r\n            let tasks = await this.getAllTask();\r\n            const day = new Date().getDay() + 1;\r\n            console.log(day)\r\n            const taskToday = tasks.filter((task) => new Date(task.startDate).getDay() < day)\r\n            await this.getAllTask();\r\n            // console.log(taskToday)\r\n            return taskToday;\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async getTasksOfToday(): Promise<TaskModel[]> {\r\n        try {\r\n            let tasks = await this.getAllTask();\r\n            const day = new Date().getDay();\r\n            console.log(day)            \r\n            const taskTomorrow = tasks.filter((task) => task.startDate === day.toString())\r\n            await this.getAllTask();\r\n            return taskTomorrow;\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    async getTasksFinished(): Promise<TaskModel[]> {\r\n        try {\r\n            let tasks = await this.getAllTask();\r\n            const taskTomorrow = tasks.filter((task) => task.isFinish === 1)\r\n            await this.getAllTask();\r\n            return taskTomorrow;\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n\r\n    isMoreThanWeekFromNow(task: TaskModel) {\r\n\r\n        const currentDate = new Date();\r\n\r\n        const taskStartDateParts: any = task.startDate.split('-');\r\n\r\n        const validDate = new Date(taskStartDateParts[2], taskStartDateParts[1] - 1, taskStartDateParts[0]);\r\n\r\n        const currentTime = currentDate.getTime();\r\n\r\n        const week = (7 * 24 * 60 * 60 * 1000);\r\n\r\n        const calcDayOver = currentTime - validDate.getTime()\r\n\r\n        return calcDayOver > week;\r\n    }\r\n}\r\nconst dataService = new DataService();\r\nexport default dataService;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}